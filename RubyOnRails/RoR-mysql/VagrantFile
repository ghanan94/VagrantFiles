private_ip          = '192.168.123.100'
private_http_port    = 80
public_http_port     = 4567
mysql_root_password = 'devenv123'
name                = 'Ghanan Gowripalan'
email               = 'ghanan94@gmail.com'

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # So you can use git and capistrano commands from within vagrant ssh
  config.ssh.forward_agent = true

  config.vm.provider "virtualbox" do |v|
    host = RbConfig::CONFIG['host_os']

    # Give VM 1/4 system memory & access to all cpu cores on the host
    if host =~ /darwin/
      cpus = `sysctl -n hw.ncpu`.to_i
      # sysctl returns Bytes and we need to convert to MB
      mem = `sysctl -n hw.memsize`.to_i / 1024 / 1024 / 4
    elsif host =~ /linux/
      cpus = `nproc`.to_i
      # meminfo shows KB and we need to convert to MB
      mem = `grep 'MemTotal' /proc/meminfo | sed -e 's/MemTotal://' -e 's/ kB//'`.to_i / 1024 / 4
    else # sorry Windows folks, I can't help you
      cpus = 2
      mem = 1024
    end

    v.customize ["modifyvm", :id, "--memory", mem]
    v.customize ["modifyvm", :id, "--cpus", cpus]
  end

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "ubuntu/trusty64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  config.vm.network 'private_network', ip: private_ip
  config.vm.network 'forwarded_port', guest: private_http_port, host: public_http_port

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder '.', '/vagrant', nfs: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    sudo apt-get update
    sudo apt-get upgrade -y

    sudo update-alternatives --set editor /usr/bin/vim.basic
    sudo echo "America/Toronto" > /etc/timezone
    sudo dpkg-reconfigure -f noninteractive tzdata

    # Install GIT
    sudo apt-get install -y git

    # Install MySql with username 'root' and password '#{mysql_root_password}'
    sudo debconf-set-selections <<< 'mysql-server mysql-server/root_password password #{mysql_root_password}'
    sudo debconf-set-selections <<< 'mysql-server mysql-server/root_password_again password #{mysql_root_password}'
    sudo apt-get install -y mysql-server mysql-client libmysqlclient-dev # libmysqlclient-dev for mysql gem
    sudo sed -i 's/127.0.0.1/#{private_ip}/g' /etc/mysql/my.cnf
    sudo service mysql restart
    mysql --user="root" --password="#{mysql_root_password}" --execute="GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '#{mysql_root_password}';"


    # Install PGP key and add HTTPS support for APT (Passenger)
    sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 561F9B9CAC40B2F7
    sudo apt-get install -y apt-transport-https ca-certificates

    # Add APT repository (Passenger)
    sudo sh -c 'echo deb https://oss-binaries.phusionpassenger.com/apt/passenger trusty main > /etc/apt/sources.list.d/passenger.list'
    sudo apt-get update

    # Install Passenger + Nginx
    sudo apt-get install -y nginx nginx-extras passenger
    sudo cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.backup
    sudo cp /vagrant/server-conf/vagrant/nginx/nginx.conf /etc/nginx/nginx.conf
    sudo cp /vagrant/server-conf/vagrant/nginx/local.conf /etc/nginx/sites-available/local.conf
    ln -s /etc/nginx/sites-available/local.conf /etc/nginx/sites-enabled/local.conf
    sudo rm -rf /etc/nginx/sites-enabled/default
    sudo service nginx restart

    # Install Node.js
    sudo apt-get install -y nodejs

    # Install NTP
    sudo apt-get install -y ntp
  SHELL

  config.vm.provision "shell", privileged: false, inline: <<-SHELL
    # Install RVM
    command curl -sSL https://rvm.io/mpapis.asc | gpg --import -
    curl -L get.rvm.io | bash -s stable
    source $HOME/.rvm/scripts/rvm
    rvm requirements
    rvm install 2.1.2
    rvm use 2.1.2 --default
    rvm rubygems current

    # Go to /vagrant folder on vagrant ssh right away
    echo "cd /vagrant" >> ~/.bashrc
    cd /vagrant

    # Install Bundler
    gem install --no-ri --no-rdoc bundler
    bundle install --path vendor/bundle

    # Initialize db
    bin/rake db:create
    bin/rake db:migrate
    bin/rake db:seed

    # Initial Git stuff
    git config --global push.default simple
    git config --global user.name '#{name}'
    git config --global user.email '#{email}'
  SHELL


  config.vm.provision "shell", inline: <<-SHELL
    sudo service nginx restart
    sudo service mysql restart
    sudo passenger-config validate-install --auto
    echo "Done Vagrant initialization. Setup on ip #{private_ip}"
    echo "HTTP: host port #{public_http_port} forwared to guest port #{private_http_port}"
  SHELL
end

